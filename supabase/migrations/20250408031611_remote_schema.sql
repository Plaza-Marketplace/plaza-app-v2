create extension if not exists "postgis" with schema "extensions";

create extension if not exists "wrappers" with schema "extensions";


create type "public"."community_post_type" as enum ('POST', 'SHOWCASE', 'REVIEW');

create type "public"."notification_type" as enum ('PURCHASE_CONFIRMED', 'ORDER_ON_THE_WAY', 'ORDER_DELIVERED', 'SOLD_ITEM', 'SOLD_ITEM_DELIVERED', 'LIKED_YOUR_VIDEO', 'COMMENTED_ON_YOUR_VIDEO', 'LIKED_YOUR_COMMENT', 'ITEM_ADDED_TO_COMMUNITY_COLLECTION', 'POST_UPLOADED_TO_COMMUNITY', 'LIKED_YOUR_COMMUNITY_POST', 'COMMENTED_ON_YOUR_COMMUNITY_POST');

create type "public"."order_status" as enum ('PENDING', 'CONFIRMED', 'SHIPPED', 'DELIVERED', 'CANCELED');

create table "public"."address" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "city" character varying not null,
    "state" character varying not null,
    "addr_line1" character varying not null,
    "zip_code" character varying not null,
    "addressed_to" character varying not null,
    "country" character varying not null,
    "created_id" bigint not null,
    "addr_line2" character varying
);


alter table "public"."address" enable row level security;

create table "public"."cart_item" (
    "id" bigint generated by default as identity not null,
    "product_id" bigint not null,
    "user_id" bigint not null,
    "quantity" integer not null default 1,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."cart_item" enable row level security;

create table "public"."community" (
    "id" bigint generated by default as identity not null,
    "name" character varying not null,
    "description" character varying not null,
    "icon_key" character varying,
    "banner_key" character varying,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."community" enable row level security;

create table "public"."community_collection_item" (
    "id" bigint generated by default as identity not null,
    "community_id" bigint not null,
    "product_id" bigint not null,
    "description" character varying,
    "created_at" timestamp with time zone not null default now()
);


create table "public"."community_member" (
    "id" bigint generated by default as identity not null,
    "user_id" bigint not null,
    "created_at" timestamp with time zone not null default now(),
    "community_id" bigint not null
);


alter table "public"."community_member" enable row level security;

create table "public"."community_post" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "community_id" bigint not null,
    "poster_id" bigint not null,
    "title" character varying not null,
    "description" character varying not null,
    "post_type" community_post_type not null,
    "product_id" bigint,
    "image_url" character varying
);


create table "public"."conversation" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" character varying not null
);


alter table "public"."conversation" enable row level security;

create table "public"."conversation_member" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "conversation_id" bigint not null,
    "user_id" bigint not null
);


alter table "public"."conversation_member" enable row level security;

create table "public"."event" (
    "id" bigint generated by default as identity not null,
    "community_id" bigint not null,
    "name" character varying not null,
    "coordinates" geography not null,
    "created_at" timestamp with time zone not null default now(),
    "start_date" timestamp with time zone not null,
    "end_date" timestamp with time zone not null,
    "city" character varying not null,
    "state" character varying not null,
    "address" character varying not null,
    "banner_key" character varying,
    "icon_key" character varying
);


alter table "public"."event" enable row level security;

create table "public"."featured_community" (
    "id" bigint generated by default as identity not null,
    "community_id" bigint not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."featured_community" enable row level security;

create table "public"."follow" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "source_id" bigint not null,
    "dest_id" bigint not null
);


alter table "public"."follow" enable row level security;

create table "public"."follow_request" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "sender_id" bigint not null,
    "recipient_id" bigint not null
);


create table "public"."message" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" bigint not null,
    "conversation_id" bigint not null,
    "content" character varying not null
);


create table "public"."notification" (
    "id" bigint generated by default as identity not null,
    "user_id" bigint not null,
    "type" notification_type not null,
    "description" character varying not null,
    "is_read" boolean not null,
    "created_at" timestamp with time zone not null default now()
);


create table "public"."notification_image" (
    "id" bigint generated by default as identity not null,
    "notification_id" bigint not null,
    "image_key" character varying not null,
    "created_at" timestamp with time zone not null default now(),
    "is_left" boolean not null default true,
    "is_user" boolean not null
);


create table "public"."order_history_item" (
    "id" bigint generated by default as identity not null,
    "buyer_id" bigint not null,
    "product_id" bigint not null,
    "status" order_status not null default 'PENDING'::order_status,
    "created_at" timestamp with time zone not null default now(),
    "final_price" numeric not null,
    "shipping_date" timestamp with time zone,
    "delivered_date" timestamp with time zone,
    "seller_id" bigint not null,
    "tracking_number" character varying,
    "shipping_provider" character varying,
    "shipping_address_id" bigint not null,
    "quantity" integer not null default 1,
    "variant_id" bigint
);


create table "public"."product" (
    "id" bigint generated by default as identity not null,
    "seller_id" bigint not null,
    "name" character varying not null,
    "description" character varying not null,
    "price" numeric,
    "quantity" integer,
    "created_at" timestamp with time zone not null default now(),
    "shipping_price" numeric not null,
    "category" character varying not null,
    "condition" character varying not null,
    "average_rating" double precision not null default '0'::double precision,
    "has_variants" boolean not null default false
);


alter table "public"."product" enable row level security;

create table "public"."product_image" (
    "id" bigint generated by default as identity not null,
    "product_id" bigint not null,
    "image_key" character varying not null,
    "created_at" timestamp with time zone not null default now()
);


create table "public"."product_review" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "product_id" bigint not null,
    "reviewer_id" bigint not null,
    "description" character varying not null,
    "rating" smallint not null
);


alter table "public"."product_review" enable row level security;

create table "public"."product_variant" (
    "id" bigint generated by default as identity not null,
    "price" numeric not null,
    "quantity" integer,
    "created_at" timestamp with time zone not null default now(),
    "product_id" bigint not null
);


alter table "public"."product_variant" enable row level security;

create table "public"."product_variant_option" (
    "id" bigint generated by default as identity not null,
    "variant_id" bigint not null,
    "value_id" bigint not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."product_variant_option" enable row level security;

create table "public"."product_variant_type" (
    "id" bigint generated by default as identity not null,
    "product_id" bigint not null,
    "name" character varying not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."product_variant_type" enable row level security;

create table "public"."product_variant_value" (
    "id" bigint generated by default as identity not null,
    "type_id" bigint not null,
    "name" character varying not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."product_variant_value" enable row level security;

create table "public"."seller_review" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "seller_id" bigint not null,
    "reviewer_id" bigint not null,
    "description" character varying not null,
    "rating" smallint not null
);


alter table "public"."seller_review" enable row level security;

create table "public"."user" (
    "id" bigint generated by default as identity not null,
    "auth_id" uuid not null default auth.uid(),
    "first_name" character varying not null,
    "last_name" character varying not null,
    "username" character varying not null,
    "email" character varying not null,
    "description" character varying,
    "created_at" timestamp with time zone not null default now(),
    "location" geography,
    "profile_image_key" character varying,
    "average_rating" double precision not null default '0'::double precision,
    "stripe_customer_id" character varying,
    "stripe_account_id" character varying,
    "display_name" character varying not null default '""'::character varying
);


create table "public"."video" (
    "id" bigint generated by default as identity not null,
    "poster_id" bigint not null,
    "description" character varying,
    "created_at" timestamp with time zone not null default now(),
    "video_key" character varying not null
);


alter table "public"."video" enable row level security;

create table "public"."video_comment" (
    "id" bigint generated by default as identity not null,
    "video_id" bigint not null,
    "poster_id" bigint not null,
    "description" character varying not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."video_comment" enable row level security;

create table "public"."video_like" (
    "id" bigint generated by default as identity not null,
    "video_id" bigint not null,
    "liker_id" bigint not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."video_like" enable row level security;

create table "public"."video_product" (
    "id" bigint generated by default as identity not null,
    "video_id" bigint not null,
    "product_id" bigint not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."video_product" enable row level security;

CREATE UNIQUE INDEX address_pkey ON public.address USING btree (id);

CREATE UNIQUE INDEX cart_item_pkey ON public.cart_item USING btree (id);

CREATE UNIQUE INDEX community_collection_item_pkey ON public.community_collection_item USING btree (id);

CREATE UNIQUE INDEX community_member_pkey ON public.community_member USING btree (id);

CREATE UNIQUE INDEX community_pkey ON public.community USING btree (id);

CREATE UNIQUE INDEX community_posts_pkey ON public.community_post USING btree (id);

CREATE UNIQUE INDEX conversation_member_pkey ON public.conversation_member USING btree (id);

CREATE UNIQUE INDEX conversation_pkey ON public.conversation USING btree (id);

CREATE UNIQUE INDEX event_pkey ON public.event USING btree (id);

CREATE UNIQUE INDEX featured_community_pkey ON public.featured_community USING btree (id);

CREATE UNIQUE INDEX follow_pkey ON public.follow USING btree (id);

CREATE UNIQUE INDEX follow_request_pkey ON public.follow_request USING btree (id);

CREATE UNIQUE INDEX message_pkey ON public.message USING btree (id);

CREATE UNIQUE INDEX notification_image_pkey ON public.notification_image USING btree (id);

CREATE UNIQUE INDEX notifications_pkey ON public.notification USING btree (id);

CREATE UNIQUE INDEX order_history_item_pkey ON public.order_history_item USING btree (id);

CREATE UNIQUE INDEX product_image_pkey ON public.product_image USING btree (id);

CREATE UNIQUE INDEX product_pkey ON public.product USING btree (id);

CREATE UNIQUE INDEX product_review_pkey ON public.product_review USING btree (id);

CREATE UNIQUE INDEX product_variant_option_pkey ON public.product_variant_option USING btree (id);

CREATE UNIQUE INDEX product_variant_pkey ON public.product_variant USING btree (id);

CREATE UNIQUE INDEX product_variant_type_pkey ON public.product_variant_type USING btree (id);

CREATE UNIQUE INDEX product_variant_value_pkey ON public.product_variant_value USING btree (id);

CREATE UNIQUE INDEX seller_review_pkey ON public.seller_review USING btree (id);

CREATE UNIQUE INDEX user_pkey ON public."user" USING btree (id);

CREATE UNIQUE INDEX video_comment_pkey ON public.video_comment USING btree (id);

CREATE UNIQUE INDEX video_like_pkey ON public.video_like USING btree (id);

CREATE UNIQUE INDEX video_pkey ON public.video USING btree (id);

CREATE UNIQUE INDEX video_product_pkey ON public.video_product USING btree (id);

alter table "public"."address" add constraint "address_pkey" PRIMARY KEY using index "address_pkey";

alter table "public"."cart_item" add constraint "cart_item_pkey" PRIMARY KEY using index "cart_item_pkey";

alter table "public"."community" add constraint "community_pkey" PRIMARY KEY using index "community_pkey";

alter table "public"."community_collection_item" add constraint "community_collection_item_pkey" PRIMARY KEY using index "community_collection_item_pkey";

alter table "public"."community_member" add constraint "community_member_pkey" PRIMARY KEY using index "community_member_pkey";

alter table "public"."community_post" add constraint "community_posts_pkey" PRIMARY KEY using index "community_posts_pkey";

alter table "public"."conversation" add constraint "conversation_pkey" PRIMARY KEY using index "conversation_pkey";

alter table "public"."conversation_member" add constraint "conversation_member_pkey" PRIMARY KEY using index "conversation_member_pkey";

alter table "public"."event" add constraint "event_pkey" PRIMARY KEY using index "event_pkey";

alter table "public"."featured_community" add constraint "featured_community_pkey" PRIMARY KEY using index "featured_community_pkey";

alter table "public"."follow" add constraint "follow_pkey" PRIMARY KEY using index "follow_pkey";

alter table "public"."follow_request" add constraint "follow_request_pkey" PRIMARY KEY using index "follow_request_pkey";

alter table "public"."message" add constraint "message_pkey" PRIMARY KEY using index "message_pkey";

alter table "public"."notification" add constraint "notifications_pkey" PRIMARY KEY using index "notifications_pkey";

alter table "public"."notification_image" add constraint "notification_image_pkey" PRIMARY KEY using index "notification_image_pkey";

alter table "public"."order_history_item" add constraint "order_history_item_pkey" PRIMARY KEY using index "order_history_item_pkey";

alter table "public"."product" add constraint "product_pkey" PRIMARY KEY using index "product_pkey";

alter table "public"."product_image" add constraint "product_image_pkey" PRIMARY KEY using index "product_image_pkey";

alter table "public"."product_review" add constraint "product_review_pkey" PRIMARY KEY using index "product_review_pkey";

alter table "public"."product_variant" add constraint "product_variant_pkey" PRIMARY KEY using index "product_variant_pkey";

alter table "public"."product_variant_option" add constraint "product_variant_option_pkey" PRIMARY KEY using index "product_variant_option_pkey";

alter table "public"."product_variant_type" add constraint "product_variant_type_pkey" PRIMARY KEY using index "product_variant_type_pkey";

alter table "public"."product_variant_value" add constraint "product_variant_value_pkey" PRIMARY KEY using index "product_variant_value_pkey";

alter table "public"."seller_review" add constraint "seller_review_pkey" PRIMARY KEY using index "seller_review_pkey";

alter table "public"."user" add constraint "user_pkey" PRIMARY KEY using index "user_pkey";

alter table "public"."video" add constraint "video_pkey" PRIMARY KEY using index "video_pkey";

alter table "public"."video_comment" add constraint "video_comment_pkey" PRIMARY KEY using index "video_comment_pkey";

alter table "public"."video_like" add constraint "video_like_pkey" PRIMARY KEY using index "video_like_pkey";

alter table "public"."video_product" add constraint "video_product_pkey" PRIMARY KEY using index "video_product_pkey";

alter table "public"."address" add constraint "address_created_id_fkey" FOREIGN KEY (created_id) REFERENCES "user"(id) ON DELETE CASCADE not valid;

alter table "public"."address" validate constraint "address_created_id_fkey";

alter table "public"."cart_item" add constraint "cart_item_product_id_fkey" FOREIGN KEY (product_id) REFERENCES product(id) ON DELETE CASCADE not valid;

alter table "public"."cart_item" validate constraint "cart_item_product_id_fkey";

alter table "public"."cart_item" add constraint "cart_item_quantity_check" CHECK ((quantity > 0)) not valid;

alter table "public"."cart_item" validate constraint "cart_item_quantity_check";

alter table "public"."cart_item" add constraint "cart_item_user_id_fkey" FOREIGN KEY (user_id) REFERENCES "user"(id) ON DELETE CASCADE not valid;

alter table "public"."cart_item" validate constraint "cart_item_user_id_fkey";

alter table "public"."community_collection_item" add constraint "community_collection_item_community_id_fkey" FOREIGN KEY (community_id) REFERENCES community(id) ON DELETE CASCADE not valid;

alter table "public"."community_collection_item" validate constraint "community_collection_item_community_id_fkey";

alter table "public"."community_collection_item" add constraint "community_collection_item_product_id_fkey" FOREIGN KEY (product_id) REFERENCES product(id) not valid;

alter table "public"."community_collection_item" validate constraint "community_collection_item_product_id_fkey";

alter table "public"."community_member" add constraint "community_member_community_id_fkey" FOREIGN KEY (community_id) REFERENCES community(id) ON DELETE CASCADE not valid;

alter table "public"."community_member" validate constraint "community_member_community_id_fkey";

alter table "public"."community_member" add constraint "community_member_user_id_fkey" FOREIGN KEY (user_id) REFERENCES "user"(id) ON DELETE CASCADE not valid;

alter table "public"."community_member" validate constraint "community_member_user_id_fkey";

alter table "public"."community_post" add constraint "community_posts_community_id_fkey" FOREIGN KEY (community_id) REFERENCES community(id) ON DELETE CASCADE not valid;

alter table "public"."community_post" validate constraint "community_posts_community_id_fkey";

alter table "public"."community_post" add constraint "community_posts_poster_id_fkey" FOREIGN KEY (poster_id) REFERENCES "user"(id) ON DELETE CASCADE not valid;

alter table "public"."community_post" validate constraint "community_posts_poster_id_fkey";

alter table "public"."community_post" add constraint "community_posts_product_id_fkey" FOREIGN KEY (product_id) REFERENCES product(id) ON DELETE CASCADE not valid;

alter table "public"."community_post" validate constraint "community_posts_product_id_fkey";

alter table "public"."conversation_member" add constraint "conversation_member_conversation_id_fkey" FOREIGN KEY (conversation_id) REFERENCES conversation(id) not valid;

alter table "public"."conversation_member" validate constraint "conversation_member_conversation_id_fkey";

alter table "public"."conversation_member" add constraint "conversation_member_user_id_fkey" FOREIGN KEY (user_id) REFERENCES "user"(id) not valid;

alter table "public"."conversation_member" validate constraint "conversation_member_user_id_fkey";

alter table "public"."event" add constraint "event_community_id_fkey" FOREIGN KEY (community_id) REFERENCES community(id) ON DELETE CASCADE not valid;

alter table "public"."event" validate constraint "event_community_id_fkey";

alter table "public"."featured_community" add constraint "featured_community_community_id_fkey" FOREIGN KEY (community_id) REFERENCES community(id) ON DELETE CASCADE not valid;

alter table "public"."featured_community" validate constraint "featured_community_community_id_fkey";

alter table "public"."follow" add constraint "follow_dest_id_fkey" FOREIGN KEY (dest_id) REFERENCES "user"(id) ON DELETE CASCADE not valid;

alter table "public"."follow" validate constraint "follow_dest_id_fkey";

alter table "public"."follow" add constraint "follow_source_id_fkey" FOREIGN KEY (source_id) REFERENCES "user"(id) ON DELETE CASCADE not valid;

alter table "public"."follow" validate constraint "follow_source_id_fkey";

alter table "public"."follow_request" add constraint "follow_request_recipient_id_fkey" FOREIGN KEY (recipient_id) REFERENCES "user"(id) ON DELETE CASCADE not valid;

alter table "public"."follow_request" validate constraint "follow_request_recipient_id_fkey";

alter table "public"."follow_request" add constraint "follow_request_sender_id_fkey" FOREIGN KEY (sender_id) REFERENCES "user"(id) ON DELETE CASCADE not valid;

alter table "public"."follow_request" validate constraint "follow_request_sender_id_fkey";

alter table "public"."message" add constraint "message_conversation_id_fkey" FOREIGN KEY (conversation_id) REFERENCES conversation(id) ON DELETE CASCADE not valid;

alter table "public"."message" validate constraint "message_conversation_id_fkey";

alter table "public"."message" add constraint "message_user_id_fkey" FOREIGN KEY (user_id) REFERENCES "user"(id) not valid;

alter table "public"."message" validate constraint "message_user_id_fkey";

alter table "public"."notification" add constraint "notifications_user_id_fkey" FOREIGN KEY (user_id) REFERENCES "user"(id) ON DELETE CASCADE not valid;

alter table "public"."notification" validate constraint "notifications_user_id_fkey";

alter table "public"."notification_image" add constraint "notification_image_notification_id_fkey" FOREIGN KEY (notification_id) REFERENCES notification(id) ON DELETE SET NULL not valid;

alter table "public"."notification_image" validate constraint "notification_image_notification_id_fkey";

alter table "public"."order_history_item" add constraint "order_history_item_product_id_fkey" FOREIGN KEY (product_id) REFERENCES product(id) not valid;

alter table "public"."order_history_item" validate constraint "order_history_item_product_id_fkey";

alter table "public"."order_history_item" add constraint "order_history_item_seller_id_fkey" FOREIGN KEY (seller_id) REFERENCES "user"(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."order_history_item" validate constraint "order_history_item_seller_id_fkey";

alter table "public"."order_history_item" add constraint "order_history_item_shipping_address_id_fkey" FOREIGN KEY (shipping_address_id) REFERENCES address(id) not valid;

alter table "public"."order_history_item" validate constraint "order_history_item_shipping_address_id_fkey";

alter table "public"."order_history_item" add constraint "order_history_item_user_id_fkey" FOREIGN KEY (buyer_id) REFERENCES "user"(id) ON DELETE CASCADE not valid;

alter table "public"."order_history_item" validate constraint "order_history_item_user_id_fkey";

alter table "public"."order_history_item" add constraint "order_history_item_variant_id_fkey" FOREIGN KEY (variant_id) REFERENCES product_variant(id) ON DELETE CASCADE not valid;

alter table "public"."order_history_item" validate constraint "order_history_item_variant_id_fkey";

alter table "public"."product" add constraint "product_price_check" CHECK ((price >= (0)::numeric)) not valid;

alter table "public"."product" validate constraint "product_price_check";

alter table "public"."product" add constraint "product_quantity_check" CHECK ((quantity >= 0)) not valid;

alter table "public"."product" validate constraint "product_quantity_check";

alter table "public"."product" add constraint "product_seller_id_fkey" FOREIGN KEY (seller_id) REFERENCES "user"(id) ON DELETE CASCADE not valid;

alter table "public"."product" validate constraint "product_seller_id_fkey";

alter table "public"."product" add constraint "product_shipping_price_check" CHECK ((shipping_price >= (0)::numeric)) not valid;

alter table "public"."product" validate constraint "product_shipping_price_check";

alter table "public"."product_image" add constraint "product_image_product_id_fkey" FOREIGN KEY (product_id) REFERENCES product(id) ON DELETE CASCADE not valid;

alter table "public"."product_image" validate constraint "product_image_product_id_fkey";

alter table "public"."product_review" add constraint "product_review_product_id_fkey" FOREIGN KEY (product_id) REFERENCES product(id) not valid;

alter table "public"."product_review" validate constraint "product_review_product_id_fkey";

alter table "public"."product_review" add constraint "product_review_reviewer_id_fkey" FOREIGN KEY (reviewer_id) REFERENCES "user"(id) not valid;

alter table "public"."product_review" validate constraint "product_review_reviewer_id_fkey";

alter table "public"."product_variant" add constraint "product_variant_product_id_fkey" FOREIGN KEY (product_id) REFERENCES product(id) ON DELETE CASCADE not valid;

alter table "public"."product_variant" validate constraint "product_variant_product_id_fkey";

alter table "public"."product_variant_option" add constraint "product_variant_option_value_id_fkey" FOREIGN KEY (value_id) REFERENCES product_variant_value(id) ON DELETE CASCADE not valid;

alter table "public"."product_variant_option" validate constraint "product_variant_option_value_id_fkey";

alter table "public"."product_variant_option" add constraint "product_variant_option_variant_id_fkey" FOREIGN KEY (variant_id) REFERENCES product_variant(id) ON DELETE CASCADE not valid;

alter table "public"."product_variant_option" validate constraint "product_variant_option_variant_id_fkey";

alter table "public"."product_variant_type" add constraint "product_variant_type_product_id_fkey" FOREIGN KEY (product_id) REFERENCES product(id) ON DELETE CASCADE not valid;

alter table "public"."product_variant_type" validate constraint "product_variant_type_product_id_fkey";

alter table "public"."product_variant_value" add constraint "product_variant_value_type_id_fkey" FOREIGN KEY (type_id) REFERENCES product_variant_type(id) ON DELETE CASCADE not valid;

alter table "public"."product_variant_value" validate constraint "product_variant_value_type_id_fkey";

alter table "public"."seller_review" add constraint "seller_review_reviewer_id_fkey" FOREIGN KEY (reviewer_id) REFERENCES "user"(id) not valid;

alter table "public"."seller_review" validate constraint "seller_review_reviewer_id_fkey";

alter table "public"."seller_review" add constraint "seller_review_seller_id_fkey" FOREIGN KEY (seller_id) REFERENCES "user"(id) not valid;

alter table "public"."seller_review" validate constraint "seller_review_seller_id_fkey";

alter table "public"."user" add constraint "user_auth_id_fkey" FOREIGN KEY (auth_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."user" validate constraint "user_auth_id_fkey";

alter table "public"."video" add constraint "video_poster_id_fkey" FOREIGN KEY (poster_id) REFERENCES "user"(id) ON DELETE CASCADE not valid;

alter table "public"."video" validate constraint "video_poster_id_fkey";

alter table "public"."video_comment" add constraint "video_comment_poster_id_fkey" FOREIGN KEY (poster_id) REFERENCES "user"(id) ON DELETE CASCADE not valid;

alter table "public"."video_comment" validate constraint "video_comment_poster_id_fkey";

alter table "public"."video_comment" add constraint "video_comment_video_id_fkey" FOREIGN KEY (video_id) REFERENCES video(id) ON DELETE CASCADE not valid;

alter table "public"."video_comment" validate constraint "video_comment_video_id_fkey";

alter table "public"."video_like" add constraint "video_like_liker_id_fkey" FOREIGN KEY (liker_id) REFERENCES "user"(id) ON DELETE CASCADE not valid;

alter table "public"."video_like" validate constraint "video_like_liker_id_fkey";

alter table "public"."video_like" add constraint "video_like_video_id_fkey" FOREIGN KEY (video_id) REFERENCES video(id) ON DELETE CASCADE not valid;

alter table "public"."video_like" validate constraint "video_like_video_id_fkey";

alter table "public"."video_product" add constraint "video_product_product_id_fkey" FOREIGN KEY (product_id) REFERENCES product(id) ON DELETE CASCADE not valid;

alter table "public"."video_product" validate constraint "video_product_product_id_fkey";

alter table "public"."video_product" add constraint "video_product_video_id_fkey" FOREIGN KEY (video_id) REFERENCES video(id) ON DELETE CASCADE not valid;

alter table "public"."video_product" validate constraint "video_product_video_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.community_member_count(community)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$

begin
return (
select count(*) from community_member where community_id = $1.id);
end;
$function$
;

CREATE OR REPLACE FUNCTION public.create_ephemeral_key(customer_id text, stripe_version text)
 RETURNS json
 LANGUAGE plpgsql
AS $function$
declare
    response json;
begin
    select 
        http.post(
            url := 'https://api.stripe.com/v1/ephemeral_keys',
            headers := jsonb_build_array(
                jsonb_build_object('Authorization', 'Bearer ' || current_setting('vault.secrets.stripe_secret_key')),
                jsonb_build_object('Stripe-Version', stripe_version),
                jsonb_build_object('Content-Type', 'application/x-www-form-urlencoded')
            ),
            body := 'customer=' || customer_id
        ) 
    into response;

    return response;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.create_payment_intent(customer_id text, amount integer, currency text)
 RETURNS json
 LANGUAGE plpgsql
AS $function$
declare
    response json;
begin
    select 
        http.post(
            url := 'https://api.stripe.com/v1/payment_intents',
            headers := jsonb_build_array(
                jsonb_build_object('Authorization', 'Bearer ' || current_setting('vault.secrets.stripe_secret_key')),
                jsonb_build_object('Content-Type', 'application/x-www-form-urlencoded')
            ),
            body := 'amount=' || amount || 
                    '&currency=' || currency || 
                    '&customer=' || customer_id
        ) 
    into response;

    return response;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.does_object_exist(key character varying)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
begin
  RETURN EXISTS(
    SELECT 1 FROM storage.objects
    WHERE name = key
  );
end;
$function$
;

CREATE OR REPLACE FUNCTION public.does_user_follow_other_user(user_id bigint)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
begin
  RETURN (
    SELECT follow.dest_id = user_id
    FROM follow
    WHERE follow.source_id = get_current_user_id()
    LIMIT 1
  );
end;
$function$
;

CREATE OR REPLACE FUNCTION public.does_user_own_product(product_id bigint)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
begin
  RETURN (
    SELECT product.seller_id = get_current_user_id()
    FROM product
    WHERE product.id = product_id
    LIMIT 1
  );
end;
$function$
;

CREATE OR REPLACE FUNCTION public.does_user_own_video(video_id bigint)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
begin
  RETURN (
    SELECT video.poster_id = get_current_user_id()
    FROM video
    WHERE video.id = video_id
    LIMIT 1
  );
end;
$function$
;

CREATE OR REPLACE FUNCTION public.get_current_user_id()
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
begin
  return (
    SELECT "user".id
    FROM "user"
    WHERE ("user".auth_id = ( SELECT auth.uid() AS uid))
    LIMIT 1
  );
end;
$function$
;

CREATE OR REPLACE FUNCTION public.get_event(event_id bigint)
 RETURNS TABLE(id bigint, name character varying, longitude double precision, latitude double precision)
 LANGUAGE plpgsql
AS $function$
begin
  return query
  select
    event.id,
    event.name,
    st_x(coordinates::geometry) as longitude,
    st_y(coordinates::geometry) as latitude
  from event
  where event.id = event_id;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
begin
  insert into public.user (auth_id, first_name, last_name, username, email)
  values (new.id, new.raw_user_meta_data ->> 'first_name', new.raw_user_meta_data ->> 'last_name', new.raw_user_meta_data ->> 'username', new.email);
  return new;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.increment_cart_quantity(item_id bigint, increment_by bigint)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$DECLARE
  new_quantity BIGINT;
BEGIN
  UPDATE cart_item 
  SET quantity = quantity + increment_by 
  WHERE id = item_id 
  RETURNING quantity INTO new_quantity;

  RETURN new_quantity;
END;$function$
;

CREATE OR REPLACE FUNCTION public.is_current_user(entity_id bigint)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
begin
  RETURN EXISTS (
    SELECT 1
    FROM "user"
    WHERE "user".auth_id = (SELECT auth.uid())
    AND "user".id = entity_id
  );
end;
$function$
;

CREATE OR REPLACE FUNCTION public.is_user_already_community_member(community_id bigint)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
begin
  RETURN EXISTS(
    SELECT 1 FROM community_member
    WHERE community_member.user_id = get_current_user_id() AND community_member.community_id = is_user_already_community_member.community_id
  );
end;
$function$
;

CREATE OR REPLACE FUNCTION public.update_product_average_rating()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
begin
  update product
  set average_rating = (
    select avg(rating)
    from product_review
    where product_id = new.product_id
  )
  where id = new.product_id;

  return new;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.update_seller_average_rating()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
begin
  update "user"
  set average_rating = (
    select avg(rating)
    from seller_review
    where seller_id = new.seller_id
  )
  where id = new.seller_id;

  return new;
end;
$function$
;

grant delete on table "public"."address" to "anon";

grant insert on table "public"."address" to "anon";

grant references on table "public"."address" to "anon";

grant select on table "public"."address" to "anon";

grant trigger on table "public"."address" to "anon";

grant truncate on table "public"."address" to "anon";

grant update on table "public"."address" to "anon";

grant delete on table "public"."address" to "authenticated";

grant insert on table "public"."address" to "authenticated";

grant references on table "public"."address" to "authenticated";

grant select on table "public"."address" to "authenticated";

grant trigger on table "public"."address" to "authenticated";

grant truncate on table "public"."address" to "authenticated";

grant update on table "public"."address" to "authenticated";

grant delete on table "public"."address" to "service_role";

grant insert on table "public"."address" to "service_role";

grant references on table "public"."address" to "service_role";

grant select on table "public"."address" to "service_role";

grant trigger on table "public"."address" to "service_role";

grant truncate on table "public"."address" to "service_role";

grant update on table "public"."address" to "service_role";

grant delete on table "public"."cart_item" to "anon";

grant insert on table "public"."cart_item" to "anon";

grant references on table "public"."cart_item" to "anon";

grant select on table "public"."cart_item" to "anon";

grant trigger on table "public"."cart_item" to "anon";

grant truncate on table "public"."cart_item" to "anon";

grant update on table "public"."cart_item" to "anon";

grant delete on table "public"."cart_item" to "authenticated";

grant insert on table "public"."cart_item" to "authenticated";

grant references on table "public"."cart_item" to "authenticated";

grant select on table "public"."cart_item" to "authenticated";

grant trigger on table "public"."cart_item" to "authenticated";

grant truncate on table "public"."cart_item" to "authenticated";

grant update on table "public"."cart_item" to "authenticated";

grant delete on table "public"."cart_item" to "service_role";

grant insert on table "public"."cart_item" to "service_role";

grant references on table "public"."cart_item" to "service_role";

grant select on table "public"."cart_item" to "service_role";

grant trigger on table "public"."cart_item" to "service_role";

grant truncate on table "public"."cart_item" to "service_role";

grant update on table "public"."cart_item" to "service_role";

grant delete on table "public"."community" to "anon";

grant insert on table "public"."community" to "anon";

grant references on table "public"."community" to "anon";

grant select on table "public"."community" to "anon";

grant trigger on table "public"."community" to "anon";

grant truncate on table "public"."community" to "anon";

grant update on table "public"."community" to "anon";

grant delete on table "public"."community" to "authenticated";

grant insert on table "public"."community" to "authenticated";

grant references on table "public"."community" to "authenticated";

grant select on table "public"."community" to "authenticated";

grant trigger on table "public"."community" to "authenticated";

grant truncate on table "public"."community" to "authenticated";

grant update on table "public"."community" to "authenticated";

grant delete on table "public"."community" to "service_role";

grant insert on table "public"."community" to "service_role";

grant references on table "public"."community" to "service_role";

grant select on table "public"."community" to "service_role";

grant trigger on table "public"."community" to "service_role";

grant truncate on table "public"."community" to "service_role";

grant update on table "public"."community" to "service_role";

grant delete on table "public"."community_collection_item" to "anon";

grant insert on table "public"."community_collection_item" to "anon";

grant references on table "public"."community_collection_item" to "anon";

grant select on table "public"."community_collection_item" to "anon";

grant trigger on table "public"."community_collection_item" to "anon";

grant truncate on table "public"."community_collection_item" to "anon";

grant update on table "public"."community_collection_item" to "anon";

grant delete on table "public"."community_collection_item" to "authenticated";

grant insert on table "public"."community_collection_item" to "authenticated";

grant references on table "public"."community_collection_item" to "authenticated";

grant select on table "public"."community_collection_item" to "authenticated";

grant trigger on table "public"."community_collection_item" to "authenticated";

grant truncate on table "public"."community_collection_item" to "authenticated";

grant update on table "public"."community_collection_item" to "authenticated";

grant delete on table "public"."community_collection_item" to "service_role";

grant insert on table "public"."community_collection_item" to "service_role";

grant references on table "public"."community_collection_item" to "service_role";

grant select on table "public"."community_collection_item" to "service_role";

grant trigger on table "public"."community_collection_item" to "service_role";

grant truncate on table "public"."community_collection_item" to "service_role";

grant update on table "public"."community_collection_item" to "service_role";

grant delete on table "public"."community_member" to "anon";

grant insert on table "public"."community_member" to "anon";

grant references on table "public"."community_member" to "anon";

grant select on table "public"."community_member" to "anon";

grant trigger on table "public"."community_member" to "anon";

grant truncate on table "public"."community_member" to "anon";

grant update on table "public"."community_member" to "anon";

grant delete on table "public"."community_member" to "authenticated";

grant insert on table "public"."community_member" to "authenticated";

grant references on table "public"."community_member" to "authenticated";

grant select on table "public"."community_member" to "authenticated";

grant trigger on table "public"."community_member" to "authenticated";

grant truncate on table "public"."community_member" to "authenticated";

grant update on table "public"."community_member" to "authenticated";

grant delete on table "public"."community_member" to "service_role";

grant insert on table "public"."community_member" to "service_role";

grant references on table "public"."community_member" to "service_role";

grant select on table "public"."community_member" to "service_role";

grant trigger on table "public"."community_member" to "service_role";

grant truncate on table "public"."community_member" to "service_role";

grant update on table "public"."community_member" to "service_role";

grant delete on table "public"."community_post" to "anon";

grant insert on table "public"."community_post" to "anon";

grant references on table "public"."community_post" to "anon";

grant select on table "public"."community_post" to "anon";

grant trigger on table "public"."community_post" to "anon";

grant truncate on table "public"."community_post" to "anon";

grant update on table "public"."community_post" to "anon";

grant delete on table "public"."community_post" to "authenticated";

grant insert on table "public"."community_post" to "authenticated";

grant references on table "public"."community_post" to "authenticated";

grant select on table "public"."community_post" to "authenticated";

grant trigger on table "public"."community_post" to "authenticated";

grant truncate on table "public"."community_post" to "authenticated";

grant update on table "public"."community_post" to "authenticated";

grant delete on table "public"."community_post" to "service_role";

grant insert on table "public"."community_post" to "service_role";

grant references on table "public"."community_post" to "service_role";

grant select on table "public"."community_post" to "service_role";

grant trigger on table "public"."community_post" to "service_role";

grant truncate on table "public"."community_post" to "service_role";

grant update on table "public"."community_post" to "service_role";

grant delete on table "public"."conversation" to "anon";

grant insert on table "public"."conversation" to "anon";

grant references on table "public"."conversation" to "anon";

grant select on table "public"."conversation" to "anon";

grant trigger on table "public"."conversation" to "anon";

grant truncate on table "public"."conversation" to "anon";

grant update on table "public"."conversation" to "anon";

grant delete on table "public"."conversation" to "authenticated";

grant insert on table "public"."conversation" to "authenticated";

grant references on table "public"."conversation" to "authenticated";

grant select on table "public"."conversation" to "authenticated";

grant trigger on table "public"."conversation" to "authenticated";

grant truncate on table "public"."conversation" to "authenticated";

grant update on table "public"."conversation" to "authenticated";

grant delete on table "public"."conversation" to "service_role";

grant insert on table "public"."conversation" to "service_role";

grant references on table "public"."conversation" to "service_role";

grant select on table "public"."conversation" to "service_role";

grant trigger on table "public"."conversation" to "service_role";

grant truncate on table "public"."conversation" to "service_role";

grant update on table "public"."conversation" to "service_role";

grant delete on table "public"."conversation_member" to "anon";

grant insert on table "public"."conversation_member" to "anon";

grant references on table "public"."conversation_member" to "anon";

grant select on table "public"."conversation_member" to "anon";

grant trigger on table "public"."conversation_member" to "anon";

grant truncate on table "public"."conversation_member" to "anon";

grant update on table "public"."conversation_member" to "anon";

grant delete on table "public"."conversation_member" to "authenticated";

grant insert on table "public"."conversation_member" to "authenticated";

grant references on table "public"."conversation_member" to "authenticated";

grant select on table "public"."conversation_member" to "authenticated";

grant trigger on table "public"."conversation_member" to "authenticated";

grant truncate on table "public"."conversation_member" to "authenticated";

grant update on table "public"."conversation_member" to "authenticated";

grant delete on table "public"."conversation_member" to "service_role";

grant insert on table "public"."conversation_member" to "service_role";

grant references on table "public"."conversation_member" to "service_role";

grant select on table "public"."conversation_member" to "service_role";

grant trigger on table "public"."conversation_member" to "service_role";

grant truncate on table "public"."conversation_member" to "service_role";

grant update on table "public"."conversation_member" to "service_role";

grant delete on table "public"."event" to "anon";

grant insert on table "public"."event" to "anon";

grant references on table "public"."event" to "anon";

grant select on table "public"."event" to "anon";

grant trigger on table "public"."event" to "anon";

grant truncate on table "public"."event" to "anon";

grant update on table "public"."event" to "anon";

grant delete on table "public"."event" to "authenticated";

grant insert on table "public"."event" to "authenticated";

grant references on table "public"."event" to "authenticated";

grant select on table "public"."event" to "authenticated";

grant trigger on table "public"."event" to "authenticated";

grant truncate on table "public"."event" to "authenticated";

grant update on table "public"."event" to "authenticated";

grant delete on table "public"."event" to "service_role";

grant insert on table "public"."event" to "service_role";

grant references on table "public"."event" to "service_role";

grant select on table "public"."event" to "service_role";

grant trigger on table "public"."event" to "service_role";

grant truncate on table "public"."event" to "service_role";

grant update on table "public"."event" to "service_role";

grant delete on table "public"."featured_community" to "anon";

grant insert on table "public"."featured_community" to "anon";

grant references on table "public"."featured_community" to "anon";

grant select on table "public"."featured_community" to "anon";

grant trigger on table "public"."featured_community" to "anon";

grant truncate on table "public"."featured_community" to "anon";

grant update on table "public"."featured_community" to "anon";

grant delete on table "public"."featured_community" to "authenticated";

grant insert on table "public"."featured_community" to "authenticated";

grant references on table "public"."featured_community" to "authenticated";

grant select on table "public"."featured_community" to "authenticated";

grant trigger on table "public"."featured_community" to "authenticated";

grant truncate on table "public"."featured_community" to "authenticated";

grant update on table "public"."featured_community" to "authenticated";

grant delete on table "public"."featured_community" to "service_role";

grant insert on table "public"."featured_community" to "service_role";

grant references on table "public"."featured_community" to "service_role";

grant select on table "public"."featured_community" to "service_role";

grant trigger on table "public"."featured_community" to "service_role";

grant truncate on table "public"."featured_community" to "service_role";

grant update on table "public"."featured_community" to "service_role";

grant delete on table "public"."follow" to "anon";

grant insert on table "public"."follow" to "anon";

grant references on table "public"."follow" to "anon";

grant select on table "public"."follow" to "anon";

grant trigger on table "public"."follow" to "anon";

grant truncate on table "public"."follow" to "anon";

grant update on table "public"."follow" to "anon";

grant delete on table "public"."follow" to "authenticated";

grant insert on table "public"."follow" to "authenticated";

grant references on table "public"."follow" to "authenticated";

grant select on table "public"."follow" to "authenticated";

grant trigger on table "public"."follow" to "authenticated";

grant truncate on table "public"."follow" to "authenticated";

grant update on table "public"."follow" to "authenticated";

grant delete on table "public"."follow" to "service_role";

grant insert on table "public"."follow" to "service_role";

grant references on table "public"."follow" to "service_role";

grant select on table "public"."follow" to "service_role";

grant trigger on table "public"."follow" to "service_role";

grant truncate on table "public"."follow" to "service_role";

grant update on table "public"."follow" to "service_role";

grant delete on table "public"."follow_request" to "anon";

grant insert on table "public"."follow_request" to "anon";

grant references on table "public"."follow_request" to "anon";

grant select on table "public"."follow_request" to "anon";

grant trigger on table "public"."follow_request" to "anon";

grant truncate on table "public"."follow_request" to "anon";

grant update on table "public"."follow_request" to "anon";

grant delete on table "public"."follow_request" to "authenticated";

grant insert on table "public"."follow_request" to "authenticated";

grant references on table "public"."follow_request" to "authenticated";

grant select on table "public"."follow_request" to "authenticated";

grant trigger on table "public"."follow_request" to "authenticated";

grant truncate on table "public"."follow_request" to "authenticated";

grant update on table "public"."follow_request" to "authenticated";

grant delete on table "public"."follow_request" to "service_role";

grant insert on table "public"."follow_request" to "service_role";

grant references on table "public"."follow_request" to "service_role";

grant select on table "public"."follow_request" to "service_role";

grant trigger on table "public"."follow_request" to "service_role";

grant truncate on table "public"."follow_request" to "service_role";

grant update on table "public"."follow_request" to "service_role";

grant delete on table "public"."message" to "anon";

grant insert on table "public"."message" to "anon";

grant references on table "public"."message" to "anon";

grant select on table "public"."message" to "anon";

grant trigger on table "public"."message" to "anon";

grant truncate on table "public"."message" to "anon";

grant update on table "public"."message" to "anon";

grant delete on table "public"."message" to "authenticated";

grant insert on table "public"."message" to "authenticated";

grant references on table "public"."message" to "authenticated";

grant select on table "public"."message" to "authenticated";

grant trigger on table "public"."message" to "authenticated";

grant truncate on table "public"."message" to "authenticated";

grant update on table "public"."message" to "authenticated";

grant delete on table "public"."message" to "service_role";

grant insert on table "public"."message" to "service_role";

grant references on table "public"."message" to "service_role";

grant select on table "public"."message" to "service_role";

grant trigger on table "public"."message" to "service_role";

grant truncate on table "public"."message" to "service_role";

grant update on table "public"."message" to "service_role";

grant delete on table "public"."notification" to "anon";

grant insert on table "public"."notification" to "anon";

grant references on table "public"."notification" to "anon";

grant select on table "public"."notification" to "anon";

grant trigger on table "public"."notification" to "anon";

grant truncate on table "public"."notification" to "anon";

grant update on table "public"."notification" to "anon";

grant delete on table "public"."notification" to "authenticated";

grant insert on table "public"."notification" to "authenticated";

grant references on table "public"."notification" to "authenticated";

grant select on table "public"."notification" to "authenticated";

grant trigger on table "public"."notification" to "authenticated";

grant truncate on table "public"."notification" to "authenticated";

grant update on table "public"."notification" to "authenticated";

grant delete on table "public"."notification" to "service_role";

grant insert on table "public"."notification" to "service_role";

grant references on table "public"."notification" to "service_role";

grant select on table "public"."notification" to "service_role";

grant trigger on table "public"."notification" to "service_role";

grant truncate on table "public"."notification" to "service_role";

grant update on table "public"."notification" to "service_role";

grant delete on table "public"."notification_image" to "anon";

grant insert on table "public"."notification_image" to "anon";

grant references on table "public"."notification_image" to "anon";

grant select on table "public"."notification_image" to "anon";

grant trigger on table "public"."notification_image" to "anon";

grant truncate on table "public"."notification_image" to "anon";

grant update on table "public"."notification_image" to "anon";

grant delete on table "public"."notification_image" to "authenticated";

grant insert on table "public"."notification_image" to "authenticated";

grant references on table "public"."notification_image" to "authenticated";

grant select on table "public"."notification_image" to "authenticated";

grant trigger on table "public"."notification_image" to "authenticated";

grant truncate on table "public"."notification_image" to "authenticated";

grant update on table "public"."notification_image" to "authenticated";

grant delete on table "public"."notification_image" to "service_role";

grant insert on table "public"."notification_image" to "service_role";

grant references on table "public"."notification_image" to "service_role";

grant select on table "public"."notification_image" to "service_role";

grant trigger on table "public"."notification_image" to "service_role";

grant truncate on table "public"."notification_image" to "service_role";

grant update on table "public"."notification_image" to "service_role";

grant delete on table "public"."order_history_item" to "anon";

grant insert on table "public"."order_history_item" to "anon";

grant references on table "public"."order_history_item" to "anon";

grant select on table "public"."order_history_item" to "anon";

grant trigger on table "public"."order_history_item" to "anon";

grant truncate on table "public"."order_history_item" to "anon";

grant update on table "public"."order_history_item" to "anon";

grant delete on table "public"."order_history_item" to "authenticated";

grant insert on table "public"."order_history_item" to "authenticated";

grant references on table "public"."order_history_item" to "authenticated";

grant select on table "public"."order_history_item" to "authenticated";

grant trigger on table "public"."order_history_item" to "authenticated";

grant truncate on table "public"."order_history_item" to "authenticated";

grant update on table "public"."order_history_item" to "authenticated";

grant delete on table "public"."order_history_item" to "service_role";

grant insert on table "public"."order_history_item" to "service_role";

grant references on table "public"."order_history_item" to "service_role";

grant select on table "public"."order_history_item" to "service_role";

grant trigger on table "public"."order_history_item" to "service_role";

grant truncate on table "public"."order_history_item" to "service_role";

grant update on table "public"."order_history_item" to "service_role";

grant delete on table "public"."product" to "anon";

grant insert on table "public"."product" to "anon";

grant references on table "public"."product" to "anon";

grant select on table "public"."product" to "anon";

grant trigger on table "public"."product" to "anon";

grant truncate on table "public"."product" to "anon";

grant update on table "public"."product" to "anon";

grant delete on table "public"."product" to "authenticated";

grant insert on table "public"."product" to "authenticated";

grant references on table "public"."product" to "authenticated";

grant select on table "public"."product" to "authenticated";

grant trigger on table "public"."product" to "authenticated";

grant truncate on table "public"."product" to "authenticated";

grant update on table "public"."product" to "authenticated";

grant delete on table "public"."product" to "service_role";

grant insert on table "public"."product" to "service_role";

grant references on table "public"."product" to "service_role";

grant select on table "public"."product" to "service_role";

grant trigger on table "public"."product" to "service_role";

grant truncate on table "public"."product" to "service_role";

grant update on table "public"."product" to "service_role";

grant delete on table "public"."product_image" to "anon";

grant insert on table "public"."product_image" to "anon";

grant references on table "public"."product_image" to "anon";

grant select on table "public"."product_image" to "anon";

grant trigger on table "public"."product_image" to "anon";

grant truncate on table "public"."product_image" to "anon";

grant update on table "public"."product_image" to "anon";

grant delete on table "public"."product_image" to "authenticated";

grant insert on table "public"."product_image" to "authenticated";

grant references on table "public"."product_image" to "authenticated";

grant select on table "public"."product_image" to "authenticated";

grant trigger on table "public"."product_image" to "authenticated";

grant truncate on table "public"."product_image" to "authenticated";

grant update on table "public"."product_image" to "authenticated";

grant delete on table "public"."product_image" to "service_role";

grant insert on table "public"."product_image" to "service_role";

grant references on table "public"."product_image" to "service_role";

grant select on table "public"."product_image" to "service_role";

grant trigger on table "public"."product_image" to "service_role";

grant truncate on table "public"."product_image" to "service_role";

grant update on table "public"."product_image" to "service_role";

grant delete on table "public"."product_review" to "anon";

grant insert on table "public"."product_review" to "anon";

grant references on table "public"."product_review" to "anon";

grant select on table "public"."product_review" to "anon";

grant trigger on table "public"."product_review" to "anon";

grant truncate on table "public"."product_review" to "anon";

grant update on table "public"."product_review" to "anon";

grant delete on table "public"."product_review" to "authenticated";

grant insert on table "public"."product_review" to "authenticated";

grant references on table "public"."product_review" to "authenticated";

grant select on table "public"."product_review" to "authenticated";

grant trigger on table "public"."product_review" to "authenticated";

grant truncate on table "public"."product_review" to "authenticated";

grant update on table "public"."product_review" to "authenticated";

grant delete on table "public"."product_review" to "service_role";

grant insert on table "public"."product_review" to "service_role";

grant references on table "public"."product_review" to "service_role";

grant select on table "public"."product_review" to "service_role";

grant trigger on table "public"."product_review" to "service_role";

grant truncate on table "public"."product_review" to "service_role";

grant update on table "public"."product_review" to "service_role";

grant delete on table "public"."product_variant" to "anon";

grant insert on table "public"."product_variant" to "anon";

grant references on table "public"."product_variant" to "anon";

grant select on table "public"."product_variant" to "anon";

grant trigger on table "public"."product_variant" to "anon";

grant truncate on table "public"."product_variant" to "anon";

grant update on table "public"."product_variant" to "anon";

grant delete on table "public"."product_variant" to "authenticated";

grant insert on table "public"."product_variant" to "authenticated";

grant references on table "public"."product_variant" to "authenticated";

grant select on table "public"."product_variant" to "authenticated";

grant trigger on table "public"."product_variant" to "authenticated";

grant truncate on table "public"."product_variant" to "authenticated";

grant update on table "public"."product_variant" to "authenticated";

grant delete on table "public"."product_variant" to "service_role";

grant insert on table "public"."product_variant" to "service_role";

grant references on table "public"."product_variant" to "service_role";

grant select on table "public"."product_variant" to "service_role";

grant trigger on table "public"."product_variant" to "service_role";

grant truncate on table "public"."product_variant" to "service_role";

grant update on table "public"."product_variant" to "service_role";

grant delete on table "public"."product_variant_option" to "anon";

grant insert on table "public"."product_variant_option" to "anon";

grant references on table "public"."product_variant_option" to "anon";

grant select on table "public"."product_variant_option" to "anon";

grant trigger on table "public"."product_variant_option" to "anon";

grant truncate on table "public"."product_variant_option" to "anon";

grant update on table "public"."product_variant_option" to "anon";

grant delete on table "public"."product_variant_option" to "authenticated";

grant insert on table "public"."product_variant_option" to "authenticated";

grant references on table "public"."product_variant_option" to "authenticated";

grant select on table "public"."product_variant_option" to "authenticated";

grant trigger on table "public"."product_variant_option" to "authenticated";

grant truncate on table "public"."product_variant_option" to "authenticated";

grant update on table "public"."product_variant_option" to "authenticated";

grant delete on table "public"."product_variant_option" to "service_role";

grant insert on table "public"."product_variant_option" to "service_role";

grant references on table "public"."product_variant_option" to "service_role";

grant select on table "public"."product_variant_option" to "service_role";

grant trigger on table "public"."product_variant_option" to "service_role";

grant truncate on table "public"."product_variant_option" to "service_role";

grant update on table "public"."product_variant_option" to "service_role";

grant delete on table "public"."product_variant_type" to "anon";

grant insert on table "public"."product_variant_type" to "anon";

grant references on table "public"."product_variant_type" to "anon";

grant select on table "public"."product_variant_type" to "anon";

grant trigger on table "public"."product_variant_type" to "anon";

grant truncate on table "public"."product_variant_type" to "anon";

grant update on table "public"."product_variant_type" to "anon";

grant delete on table "public"."product_variant_type" to "authenticated";

grant insert on table "public"."product_variant_type" to "authenticated";

grant references on table "public"."product_variant_type" to "authenticated";

grant select on table "public"."product_variant_type" to "authenticated";

grant trigger on table "public"."product_variant_type" to "authenticated";

grant truncate on table "public"."product_variant_type" to "authenticated";

grant update on table "public"."product_variant_type" to "authenticated";

grant delete on table "public"."product_variant_type" to "service_role";

grant insert on table "public"."product_variant_type" to "service_role";

grant references on table "public"."product_variant_type" to "service_role";

grant select on table "public"."product_variant_type" to "service_role";

grant trigger on table "public"."product_variant_type" to "service_role";

grant truncate on table "public"."product_variant_type" to "service_role";

grant update on table "public"."product_variant_type" to "service_role";

grant delete on table "public"."product_variant_value" to "anon";

grant insert on table "public"."product_variant_value" to "anon";

grant references on table "public"."product_variant_value" to "anon";

grant select on table "public"."product_variant_value" to "anon";

grant trigger on table "public"."product_variant_value" to "anon";

grant truncate on table "public"."product_variant_value" to "anon";

grant update on table "public"."product_variant_value" to "anon";

grant delete on table "public"."product_variant_value" to "authenticated";

grant insert on table "public"."product_variant_value" to "authenticated";

grant references on table "public"."product_variant_value" to "authenticated";

grant select on table "public"."product_variant_value" to "authenticated";

grant trigger on table "public"."product_variant_value" to "authenticated";

grant truncate on table "public"."product_variant_value" to "authenticated";

grant update on table "public"."product_variant_value" to "authenticated";

grant delete on table "public"."product_variant_value" to "service_role";

grant insert on table "public"."product_variant_value" to "service_role";

grant references on table "public"."product_variant_value" to "service_role";

grant select on table "public"."product_variant_value" to "service_role";

grant trigger on table "public"."product_variant_value" to "service_role";

grant truncate on table "public"."product_variant_value" to "service_role";

grant update on table "public"."product_variant_value" to "service_role";

grant delete on table "public"."seller_review" to "anon";

grant insert on table "public"."seller_review" to "anon";

grant references on table "public"."seller_review" to "anon";

grant select on table "public"."seller_review" to "anon";

grant trigger on table "public"."seller_review" to "anon";

grant truncate on table "public"."seller_review" to "anon";

grant update on table "public"."seller_review" to "anon";

grant delete on table "public"."seller_review" to "authenticated";

grant insert on table "public"."seller_review" to "authenticated";

grant references on table "public"."seller_review" to "authenticated";

grant select on table "public"."seller_review" to "authenticated";

grant trigger on table "public"."seller_review" to "authenticated";

grant truncate on table "public"."seller_review" to "authenticated";

grant update on table "public"."seller_review" to "authenticated";

grant delete on table "public"."seller_review" to "service_role";

grant insert on table "public"."seller_review" to "service_role";

grant references on table "public"."seller_review" to "service_role";

grant select on table "public"."seller_review" to "service_role";

grant trigger on table "public"."seller_review" to "service_role";

grant truncate on table "public"."seller_review" to "service_role";

grant update on table "public"."seller_review" to "service_role";

grant delete on table "public"."user" to "anon";

grant insert on table "public"."user" to "anon";

grant references on table "public"."user" to "anon";

grant select on table "public"."user" to "anon";

grant trigger on table "public"."user" to "anon";

grant truncate on table "public"."user" to "anon";

grant update on table "public"."user" to "anon";

grant delete on table "public"."user" to "authenticated";

grant insert on table "public"."user" to "authenticated";

grant references on table "public"."user" to "authenticated";

grant select on table "public"."user" to "authenticated";

grant trigger on table "public"."user" to "authenticated";

grant truncate on table "public"."user" to "authenticated";

grant update on table "public"."user" to "authenticated";

grant delete on table "public"."user" to "service_role";

grant insert on table "public"."user" to "service_role";

grant references on table "public"."user" to "service_role";

grant select on table "public"."user" to "service_role";

grant trigger on table "public"."user" to "service_role";

grant truncate on table "public"."user" to "service_role";

grant update on table "public"."user" to "service_role";

grant delete on table "public"."video" to "anon";

grant insert on table "public"."video" to "anon";

grant references on table "public"."video" to "anon";

grant select on table "public"."video" to "anon";

grant trigger on table "public"."video" to "anon";

grant truncate on table "public"."video" to "anon";

grant update on table "public"."video" to "anon";

grant delete on table "public"."video" to "authenticated";

grant insert on table "public"."video" to "authenticated";

grant references on table "public"."video" to "authenticated";

grant select on table "public"."video" to "authenticated";

grant trigger on table "public"."video" to "authenticated";

grant truncate on table "public"."video" to "authenticated";

grant update on table "public"."video" to "authenticated";

grant delete on table "public"."video" to "service_role";

grant insert on table "public"."video" to "service_role";

grant references on table "public"."video" to "service_role";

grant select on table "public"."video" to "service_role";

grant trigger on table "public"."video" to "service_role";

grant truncate on table "public"."video" to "service_role";

grant update on table "public"."video" to "service_role";

grant delete on table "public"."video_comment" to "anon";

grant insert on table "public"."video_comment" to "anon";

grant references on table "public"."video_comment" to "anon";

grant select on table "public"."video_comment" to "anon";

grant trigger on table "public"."video_comment" to "anon";

grant truncate on table "public"."video_comment" to "anon";

grant update on table "public"."video_comment" to "anon";

grant delete on table "public"."video_comment" to "authenticated";

grant insert on table "public"."video_comment" to "authenticated";

grant references on table "public"."video_comment" to "authenticated";

grant select on table "public"."video_comment" to "authenticated";

grant trigger on table "public"."video_comment" to "authenticated";

grant truncate on table "public"."video_comment" to "authenticated";

grant update on table "public"."video_comment" to "authenticated";

grant delete on table "public"."video_comment" to "service_role";

grant insert on table "public"."video_comment" to "service_role";

grant references on table "public"."video_comment" to "service_role";

grant select on table "public"."video_comment" to "service_role";

grant trigger on table "public"."video_comment" to "service_role";

grant truncate on table "public"."video_comment" to "service_role";

grant update on table "public"."video_comment" to "service_role";

grant delete on table "public"."video_like" to "anon";

grant insert on table "public"."video_like" to "anon";

grant references on table "public"."video_like" to "anon";

grant select on table "public"."video_like" to "anon";

grant trigger on table "public"."video_like" to "anon";

grant truncate on table "public"."video_like" to "anon";

grant update on table "public"."video_like" to "anon";

grant delete on table "public"."video_like" to "authenticated";

grant insert on table "public"."video_like" to "authenticated";

grant references on table "public"."video_like" to "authenticated";

grant select on table "public"."video_like" to "authenticated";

grant trigger on table "public"."video_like" to "authenticated";

grant truncate on table "public"."video_like" to "authenticated";

grant update on table "public"."video_like" to "authenticated";

grant delete on table "public"."video_like" to "service_role";

grant insert on table "public"."video_like" to "service_role";

grant references on table "public"."video_like" to "service_role";

grant select on table "public"."video_like" to "service_role";

grant trigger on table "public"."video_like" to "service_role";

grant truncate on table "public"."video_like" to "service_role";

grant update on table "public"."video_like" to "service_role";

grant delete on table "public"."video_product" to "anon";

grant insert on table "public"."video_product" to "anon";

grant references on table "public"."video_product" to "anon";

grant select on table "public"."video_product" to "anon";

grant trigger on table "public"."video_product" to "anon";

grant truncate on table "public"."video_product" to "anon";

grant update on table "public"."video_product" to "anon";

grant delete on table "public"."video_product" to "authenticated";

grant insert on table "public"."video_product" to "authenticated";

grant references on table "public"."video_product" to "authenticated";

grant select on table "public"."video_product" to "authenticated";

grant trigger on table "public"."video_product" to "authenticated";

grant truncate on table "public"."video_product" to "authenticated";

grant update on table "public"."video_product" to "authenticated";

grant delete on table "public"."video_product" to "service_role";

grant insert on table "public"."video_product" to "service_role";

grant references on table "public"."video_product" to "service_role";

grant select on table "public"."video_product" to "service_role";

grant trigger on table "public"."video_product" to "service_role";

grant truncate on table "public"."video_product" to "service_role";

grant update on table "public"."video_product" to "service_role";

create policy "Enable delete for users based on user_id"
on "public"."address"
as permissive
for delete
to authenticated
using (is_current_user(created_id));


create policy "Enable insert for authenticated users only"
on "public"."address"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for authenticated users by created_id"
on "public"."address"
as permissive
for select
to authenticated
using (true);


create policy "Authenticated users can delete their cart items"
on "public"."cart_item"
as permissive
for delete
to authenticated
using (is_current_user(user_id));


create policy "Authenticated users can insert based on user_id"
on "public"."cart_item"
as permissive
for insert
to authenticated
with check (is_current_user(user_id));


create policy "Authenticated users can see their own cart items"
on "public"."cart_item"
as permissive
for select
to authenticated
using (is_current_user(user_id));


create policy "Authenticated users can update cart items"
on "public"."cart_item"
as permissive
for update
to authenticated
using (is_current_user(user_id))
with check (is_current_user(user_id));


create policy "Enable insert for authenticated users only"
on "public"."community"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read for authenticated users only"
on "public"."community"
as permissive
for select
to authenticated
using (true);


create policy "Authenticated users can join a community"
on "public"."community_member"
as permissive
for insert
to authenticated
with check ((is_current_user(user_id) AND (NOT is_user_already_community_member(id))));


create policy "Authenticated users can leave a community"
on "public"."community_member"
as permissive
for delete
to authenticated
using (is_current_user(user_id));


create policy "Authenticated users can see all community members"
on "public"."community_member"
as permissive
for select
to authenticated
using (true);


create policy "Authenticated users can see all conversations"
on "public"."conversation"
as permissive
for select
to authenticated
using (true);


create policy "Authenticated users can see"
on "public"."conversation_member"
as permissive
for select
to authenticated
using (true);


create policy "Authenticated users can see all events"
on "public"."event"
as permissive
for select
to authenticated
using (true);


create policy "Authenticated users can see all featured communities"
on "public"."featured_community"
as permissive
for select
to authenticated
using (true);


create policy "Authenticated users can delete their follows"
on "public"."follow"
as permissive
for delete
to authenticated
using (((source_id = get_current_user_id()) OR (dest_id = get_current_user_id())));


create policy "Authenticated users can follow"
on "public"."follow"
as permissive
for insert
to authenticated
with check (((source_id = get_current_user_id()) AND (dest_id <> get_current_user_id()) AND (NOT does_user_follow_other_user(dest_id))));


create policy "Authenticated users can see follows"
on "public"."follow"
as permissive
for select
to authenticated
using (true);


create policy "Authenticated users can delete their products"
on "public"."product"
as permissive
for delete
to authenticated
using (is_current_user(seller_id));


create policy "Enable insert for authenticated users based on seller_id"
on "public"."product"
as permissive
for insert
to authenticated
with check (is_current_user(seller_id));


create policy "Enable read access for all authenticated users"
on "public"."product"
as permissive
for select
to authenticated
using (true);


create policy "Authenticated users can delete an image of their product"
on "public"."product_image"
as permissive
for delete
to authenticated
using (does_user_own_product(product_id));


create policy "Authenticated users can insert an image for their product"
on "public"."product_image"
as permissive
for insert
to authenticated
with check ((does_user_own_product(product_id) AND does_object_exist(image_key)));


create policy "Authenticated users can see all product images"
on "public"."product_image"
as permissive
for select
to authenticated
using (true);


create policy "Authenticated users can see all reviews"
on "public"."product_review"
as permissive
for select
to authenticated
using (true);


create policy "Authenticated users can see all variants"
on "public"."product_variant"
as permissive
for select
to authenticated
using (true);


create policy "Authenticated users can see all variants"
on "public"."product_variant_option"
as permissive
for select
to authenticated
using (true);


create policy "Authenticated users can see all variants"
on "public"."product_variant_type"
as permissive
for select
to authenticated
using (true);


create policy "Authenticated users can see all variants"
on "public"."product_variant_value"
as permissive
for select
to authenticated
using (true);


create policy "Authenticated users can see all reviews"
on "public"."seller_review"
as permissive
for select
to authenticated
using (true);


create policy "Authenticated users can delete their own videos"
on "public"."video"
as permissive
for delete
to authenticated
using (is_current_user(poster_id));


create policy "Authenticated users can insert a video that exists"
on "public"."video"
as permissive
for insert
to authenticated
with check ((is_current_user(poster_id) AND does_object_exist(video_key)));


create policy "Enable read access for all authenticated users"
on "public"."video"
as permissive
for select
to authenticated
using (true);


create policy "Enable delete for authenticated users based on user id"
on "public"."video_comment"
as permissive
for delete
to authenticated
using (is_current_user(poster_id));


create policy "Enable insert for authenticated users only"
on "public"."video_comment"
as permissive
for insert
to authenticated
with check (is_current_user(poster_id));


create policy "Enable read access for authenticated users only"
on "public"."video_comment"
as permissive
for select
to authenticated
using (true);


create policy "Enable delete for authenticated users based on user_id"
on "public"."video_like"
as permissive
for delete
to authenticated
using (is_current_user(liker_id));


create policy "Enable insert for authenticated users only based on user id"
on "public"."video_like"
as permissive
for insert
to authenticated
with check ((is_current_user(liker_id) AND (NOT (EXISTS ( SELECT 1
   FROM video_like video_like_1
  WHERE ((video_like_1.liker_id = video_like.liker_id) AND (video_like_1.video_id = video_like.video_id)))))));


create policy "Enable read access for authenticated users only"
on "public"."video_like"
as permissive
for select
to authenticated
using (true);


create policy "Enable delete for authenticated users based on video poster id"
on "public"."video_product"
as permissive
for delete
to authenticated
using (does_user_own_video(video_id));


create policy "Enable insert for authenticated users based on video and produc"
on "public"."video_product"
as permissive
for insert
to authenticated
with check ((does_user_own_video(video_id) AND does_user_own_product(product_id)));


create policy "Enable read access for authenticated users only"
on "public"."video_product"
as permissive
for select
to authenticated
using (true);


CREATE TRIGGER update_product_average_rating AFTER INSERT ON public.product_review FOR EACH ROW EXECUTE FUNCTION update_product_average_rating();

CREATE TRIGGER update_seller_average_rating AFTER INSERT ON public.seller_review FOR EACH ROW EXECUTE FUNCTION update_seller_average_rating();


create schema if not exists "stripe";


